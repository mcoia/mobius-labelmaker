<?php
/**
* Implements hook_menu().
*/
function bnl_menu()
{
  $items['borrowing_n_lending'] = array(
    'title' => 'Borrowing and Lending',
    'page callback' => 'mobius_bnl_display',
    'access arguments' => array('access content'),
  );
  $items['borrowing_n_lending_get'] = array(
    'title' => 'Borrowing and Lending',
    'page callback' => 'mobius_bnl_postback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function mobius_bnl_display()
{
  drupal_page_is_cacheable($allow_caching = FALSE);
  drupal_add_css('/sites/all/libraries/chosen/chosen.css', 'external');
  drupal_add_js('/sites/all/libraries/chosen/chosen.jquery.js', 'external');
  drupal_add_js('https://cdn.jsdelivr.net/momentjs/latest/moment.min.js', 'external');
  drupal_add_js('https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js', 'external');
  drupal_add_css('https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css', 'external');

  $page = array (
    '#markup' =>
    '
    <h1>Dates are whole months</h1>
    <span id="mobius_bnl_page_is_loaded"></span>
    <div id="bnl_panel">
    <div id="bnl_filter_select_master_container">
   
        <div id="bnl_date_div">
        <label for="daterange">Date Range</label><br/>
        <input id="daterange" type="text" />
        </div>
    
        <div class="bnl_filter_container">
        <div class="bnl_title_container">Owning Library</div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_branch_owning" class="bnl_dropdown">
                </div>
                LIBRARY
            </div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_cluster_owning" class="bnl_dropdown">
                </div>
                CLUSTER
            </div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_system_owning" class="bnl_dropdown">
                </div>
                SYSTEM
            </div>
        </div> <!-- bnl_filter_container -->

        <div class="bnl_filter_container">
        <div class="bnl_title_container">Borrowing Library</div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_branch_borrowing" class="bnl_dropdown">
                </div>
                LIBRARY
            </div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_cluster_borrowing" class="bnl_dropdown">
                </div>
                CLUSTER
            </div>
            <div class="bnl_dropdown_wrapper">
                <div id="bnl_filter_system_borrowing" class="bnl_dropdown">
                </div>
                SYSTEM
            </div>
        </div> <!-- bnl_filter_container -->
        
        <div class="bnl_filter_container">
            <input type="checkbox" name="show-zeros" id="show_zeros"></input><label id="show_zeros_label" for="show_zeros">Show Zeros</label>
        </div> <!-- bnl_filter_container -->
    
    <div id="bnl_submit_container"><div id="bnl_submit_button">Get Results!</div></div>
    
    </div> <!-- bnl_filter_select_master_container -->
    <div id="bnl_data_tables">
    <div id="bnl_summary_divs">
    <div id="bnl_owning_summary_div_container"> <div id="bnl_owning_summary_div"></div>   </div>
    <div id="bnl_borrowing_summary_div_container"> <div id="bnl_borrowing_summary_div"></div>   </div>
    </div>
    <div id="bnl_branch_div"></div>
    <div id="bnl_cluster_div"></div>
    </div>
    <div id="bnl_pie"></div>
    
    </div> <!-- bnl_panel -->
     '
  );  // end render array

  return $page;
}

function mobius_bnl_postback()
{
    $data_array = array();
    if(isset($_GET['startdate']) && isset($_GET['enddate']))
    {
        mobius_borrowing_n_lending_json();  // calling headers
        $clusters = array
        (
            'owning' => ($_GET['cluster_owning'] ? $_GET['cluster_owning'] : ''),
            'borrowing' => ($_GET['cluster_borrowing'] ? $_GET['cluster_borrowing'] : '')
        );
        $clusters['owning'] .= ($_GET['system_owning'] ? ','.$_GET['system_owning'] : '');
        $clusters['borrowing'] .= ($_GET['system_borrowing'] ? ','.$_GET['system_borrowing'] : '');
        $clusters['owning'] = preg_replace('/^,?(.*)/','$1', $clusters['owning']);
        $clusters['borrowing'] = preg_replace('/^,?(.*)/','$1', $clusters['borrowing']);
        $branchArray = array
        (
            'bnl_owning_name.id' => $_GET['branch_owning'],
            'bnl_borrowing_name.id' => $_GET['branch_borrowing'],
            'owning_cluster_ids.cid' => $clusters['owning'],
            'borrowing_cluster_ids.cid' => $clusters['borrowing']
        );

        mobius_bnl_get_bnl_base($data_array, $_GET['startdate'], $_GET['enddate'], $branchArray, $_GET['datesummary']);

        echo $data_array = drupal_json_encode($data_array);
    }
    else if(isset($_GET['get_branches']))
    {
        mobius_borrowing_n_lending_json();  // calling headers
        mobius_bnl_get_all_branches($data_array);
        echo $data_array = drupal_json_encode($data_array);
    }

}

function mobius_bnl_get_all_branches(&$data_array)
{
    $data_array["branch"] = array();
    $data_array["cluster"] = array();
    $data_array["branch_to_cluster"] = array();
    $data_array["branch_order"] = array();
    $used = array();
    // First get the overall branch names and clusters to which they belong
     $query = "
       SELECT
        fid,fname,cid,cname,ctype
        FROM
        mobius_bnl_branch_connection_map
        order by lower(fname)
        ";
    $result = db_query($query);
    while($libraryRow = $result->fetchAssoc())
    {
        // Record the order
        if(!$used[$libraryRow["fid"]])
        {
            $used[$libraryRow["fid"]] = 1; 
            $data_array["branch_order"][] = $libraryRow["fid"];
        }
        // Record the branches
        if(!$data_array["branch"][$libraryRow["fid"]])
        {
            $data_array["branch"][$libraryRow["fid"]] = $libraryRow["fname"];
        }
        // Record the Clusters
        if(!$data_array["cluster"][$libraryRow["cid"]])
        {
           $data_array["cluster"][$libraryRow["cid"]] = array('name' => $libraryRow["cname"], 'type' => $libraryRow["ctype"]);
        }

        // Connect branches to clusters
        if(!$data_array["branch_to_cluster"][$libraryRow["fid"]])
        {
            $data_array["branch_to_cluster"][$libraryRow["fid"]] = array();
        }
        $data_array["branch_to_cluster"][$libraryRow["fid"]][$libraryRow["cid"]] = 1;
    }
}

function mobius_bnl_get_bnl_base(&$data_array, $startDate, $endDate, $branchSelections, $summary)
{
    if(!$summary)
    {
        $data_array["amount_branch"] = array();
        $data_array["amount_cluster"] = array();
    }

    $gotmore = 1;
    $offset = 0;
    $chunk = 1000;
    $totalRows = 0;
    while($gotmore > 0)
    {
        $columns = "";
        $vals = array($startDate, $endDate);
        if($summary)
        {
            $columns = "
               SELECT
               'lent' as \"type\",
           bnl_owning_name.id \"branch_id\",
           bnl.borrow_date \"borrow_date\",
           sum(bnl.quantity) \"quantity\"";
        }
        else
        {
            $columns = "
               SELECT
           bnl_borrowing_name.name \"borrowing_branch_name\", bnl_borrowing_name.id \"borrowing_branch_id\",
           bnl_owning_name.name \"owning_branch_name\", bnl_owning_name.id \"owning_branch_id\",
           (select min(cid) from mobius_bnl_branch_connection_map where fid=bnl_borrowing_branch.final_branch) \"borrowing_cluster_id\",
           (select min(cid) from mobius_bnl_branch_connection_map where fid=bnl_owning_branch.final_branch) \"owning_cluster_id\",
           sum(bnl.quantity) \"quantity\"";
        }
        $fromClauseStart = "
            FROM 
            mobius_bnl_bnl bnl,
            mobius_bnl_branch bnl_borrowing_branch,
            mobius_bnl_branch bnl_owning_branch,
            mobius_bnl_branch_name_final bnl_borrowing_name,
            mobius_bnl_branch_name_final bnl_owning_name
            WHERE
            bnl_borrowing_name.id = bnl_borrowing_branch.final_branch and
            bnl_owning_name.id = bnl_owning_branch.final_branch and
            bnl.borrowing_branch = bnl_borrowing_branch.id and
            bnl.owning_branch = bnl_owning_branch.id and
            bnl.borrow_date between str_to_date( concat(?,'-01') ,'%Y-%m-%d') and str_to_date( concat(?,'-01') ,'%Y-%m-%d')
            and bnl.quantity > 0
            ";

        $fromClause = mobius_bnl_get_bnl_base_branches_from_clause($fromClauseStart, $vals, $branchSelections, 0);
        $groupClause = ($summary ? " group by 1,2,3" : " group by 1,2,3,4,5,6");
        
        $query = $columns.$fromClause.$groupClause;
        
        if($summary) // We have to reverse and get the borrowing summary at the same time
        {
            $query .= "
            UNION ALL
            
            SELECT
               'borrow' as \"type\",
           bnl_borrowing_name.id \"branch_id\",
           bnl.borrow_date \"borrow_date\",
           sum(bnl.quantity) \"quantity\"";
           $vals[] = $startDate;
           $vals[] = $endDate;
           $fromClause = mobius_bnl_get_bnl_base_branches_from_clause($fromClauseStart, $vals, $branchSelections, 1);
           $query .= $fromClause.$groupClause;
        }
        
        $query .= "
            limit $chunk
            offset $offset";
// echo preg_replace('/\n/','<br>',$query);
// print_r($vals);
// exit;
        
        $result = db_query($query,$vals);
        while($libraryRow = $result->fetchAssoc())
        {
            if($summary)
            {
                if(!$data_array[$libraryRow["type"]])
                {
                    $data_array[$libraryRow["type"]] = array();
                }
                if(!$data_array[$libraryRow["type"]][$libraryRow["borrow_date"]])
                {
                    $data_array[$libraryRow["type"]][$libraryRow["borrow_date"]] = array();
                }
                if(!$data_array[$libraryRow["type"]][$libraryRow["borrow_date"]][$libraryRow["branch_id"]])
                {
                    $data_array[$libraryRow["type"]][$libraryRow["borrow_date"]][$libraryRow["branch_id"]] = ($libraryRow["quantity"] + 0);
                }
                else
                {
                    $data_array[$libraryRow["type"]][$libraryRow["borrow_date"]][$libraryRow["branch_id"]] += ($libraryRow["quantity"] + 0);
                }
            }
            else
            {
                // Stuff the meat of the data
                if(!$data_array["amount_branch"][$libraryRow["borrowing_branch_id"]])
                {
                    $data_array["amount_branch"][$libraryRow["borrowing_branch_id"]] = array();
                }
                $data_array["amount_branch"][$libraryRow["borrowing_branch_id"]][$libraryRow["owning_branch_id"]] = ($libraryRow["quantity"] + 0);


                // Add up totals for each whole cluster
                if(!$data_array["amount_cluster"][$libraryRow["borrowing_cluster_id"]])
                {
                    $data_array["amount_cluster"][$libraryRow["borrowing_cluster_id"]] = array();
                }
                if(!$data_array["amount_cluster"][$libraryRow["borrowing_cluster_id"]][$libraryRow["owning_cluster_id"]])
                {
                    $data_array["amount_cluster"][$libraryRow["borrowing_cluster_id"]][$libraryRow["owning_cluster_id"]] = ($libraryRow["quantity"] + 0);
                }
                else
                {
                    $data_array["amount_cluster"][$libraryRow["borrowing_cluster_id"]][$libraryRow["owning_cluster_id"]] += ($libraryRow["quantity"] + 0);
                }
            }
        }
        
        $gotmore = $result->rowCount();
        $totalRows+=$gotmore;
        unset($rows);
        unset($result);
        $offset += $chunk;
    }
    $data_array["query"] = $query;
    $data_array["result_rows"] = $totalRows;
}

function mobius_bnl_get_bnl_base_branches_from_clause($fromClause, &$vals, $branchSelections, $reverse)
{
    if($reverse)
    {
        // echo "reversing <br>";
        $temp = $branchSelections['bnl_owning_name.id'];
        $branchSelections['bnl_owning_name.id'] = $branchSelections['bnl_borrowing_name.id'];
        $branchSelections['bnl_borrowing_name.id'] = $temp;

        $temp = $branchSelections['owning_cluster_ids.cid'];
        $branchSelections['owning_cluster_ids.cid'] = $branchSelections['borrowing_cluster_ids.cid'];
        $branchSelections['borrowing_cluster_ids.cid'] = $temp;
        // print_r($branchSelections);
    }
    foreach ($branchSelections as $key => $value)
    {
        if(strlen($value) > 0)
        {
            $clause = "\nAND (";
            $something = 0;
            $values = explode(',',$value);
            $collection = "";
            foreach($values as $id)
            {
                if(is_numeric($id)) // only digits allowed here
                {
                    $something = 1;
                    if(preg_match("/cluster/", $key)) // Clusters are handle differently
                    {
                        $collection.="$id,";
                    }
                    else
                    {
                        $clause .= "\n$key = ? \nOR";
                        $vals[] = $id;
                    }
                }
            }
            if(preg_match("/cluster/", $key)) // Clusters are handle differently
            {
                $collection = substr($collection,0,-1); // chop off the last ,
                $type = ( preg_match("/owning/", $key) ? "owning" : "borrowing");
                $type = "bnl_".$type."_name.id";
                $clause .= "$type IN (SELECT fid FROM mobius_bnl_branch_connection_map WHERE cid IN ( $collection ) ) \n)";
            }
            else
            {
                $clause = substr($clause,0,-2); // chop off the last "OR"
                $clause .= ")\n";
            }
            $fromClause = ($something ? $fromClause.$clause : $fromClause);

        }
    }
    return $fromClause;
}

function mobius_borrowing_n_lending_json() {
  drupal_add_http_header('Content-Type', 'application/json');
  //drupal_add_http_header('Access-Control-Allow-Origin', "*");
  //drupal_add_http_header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
 }
 
?>

